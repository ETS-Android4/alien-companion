package com.gDyejeekis.aliencompanion.api.action;

import com.gDyejeekis.aliencompanion.api.entity.User;
import com.gDyejeekis.aliencompanion.api.utils.ApiEndpointUtils;
import com.gDyejeekis.aliencompanion.api.utils.httpClient.HttpClient;
import com.gDyejeekis.aliencompanion.api.utils.httpClient.Response;

import okhttp3.FormBody;
import okhttp3.RequestBody;

/**
 * Created by George on 8/10/2015.
 */
public class FlairActions {

    private final HttpClient httpClient;
    private User user;

    /**
     * Constructor. Global default user (null) is used.
     *
     * @param httpClient HTTP Client instance
     */
    public FlairActions(HttpClient httpClient) {
        this.httpClient = httpClient;
    }

    /**
     * Constructor.
     *
     * @param httpClient HTTP Client instance
     * @param user      User instance
     */
    public FlairActions(HttpClient httpClient, User user) {
        this.httpClient = httpClient;
        this.user = user;
    }

    /**
     * Switch the current user for the new user who will
     * be used when invoking flair requests.
     *
     * @param newUser New user
     */
    public void changeUser(User newUser) {
        this.user = newUser;
    }

    /**
     * Deletes the given user flair using the API method:<br><br>
     * <p/>
     * 'https://www.reddit.com/dev/api#POST_api_deleteflair'
     * <p/>
     * <table>
     * <tr>
     * <td>api_type</td>
     * <td>the string 'json'</td>
     * </tr>
     * <tr>
     * <td>name</td>
     * <td>a user by name</td>
     * </tr>
     * <tr>
     * <td>uh / X-Modhash header</td>
     * <td>a modhash</td>
     * </tr>
     * </table>
     *
     * @param username  The username of the user whose account you want to remove the flair from.
     * @param subreddit The subreddit to delete the flair on.
     * @return Response The response of the request
     */
    public Response deleteFlair(String username, String subreddit) {
        //Format the required parameters
        //String params = ""
        //        + "api_type=json"
        //        + "&uh=" + user.getModhash()
        //        + "&name=" + username;
        RequestBody body = new FormBody.Builder().add("api_type", "json").add("uh", user.getModhash()).add("name", username).build();

        //Then run the post request.
        return httpClient.post(ApiEndpointUtils.REDDIT_CURRENT_BASE_URL, body, String.format(ApiEndpointUtils.USER_DELETE_SUBREDDIT_FLAIR, subreddit), user.getCookie());
    }

    /**
     * Removes all of the flair templates of the given type.<br><br>
     * <p/>
     * 'https://www.reddit.com/dev/api#POST_api_clearflairtemplates'
     * <p/>
     * <table>
     * <tr>
     * <td>api_type</td>
     * <td>the string 'json'</td>
     * </tr>
     * <tr>
     * <td>flair_type</td>
     * <td>one of (USER_FLAIR, LINK_FLAIR)</td>
     * </tr>
     * <tr>
     * <td>uh / X-Modhash header</td>
     * <td>a modhash</td>
     * </tr>
     * </table>
     *
     * @param type      The type of template. Must be either USER_FLAIR or LINK_FLAIR.
     * @param subreddit The subreddit to clear the flairs on.
     * @return Response The response of the request
     */
    public Response clearFlairTemplates(String type, String subreddit) {
        if (!type.equalsIgnoreCase("USER_FLAIR") && !type.equalsIgnoreCase("LINK_FLAIR")) {
            System.err.println("Type must be either USER_FLAIR or LINK_FLAIR.");
            Response response = new Response() {//This is the best way I thought to do this. Not sure if it is -Vitineth
                @Override
                public int getStatusCode() {
                    return 400;
                }

                @Override
                public Object getResponseObject() {
                    return null;
                }

                @Override
                public String getResponseText() {
                    return "Bad request, type must be either USER_FLAIR or LINK_FLAIR. (Generated by FlairActions.clearFlairTemplates(String, String);)";
                }
            };
            return response;
        }
        //Format the required parameters
        //String params = ""
        //        + "api_type=json"
        //        + "&uh=" + user.getModhash()
        //        + "&flair_type=" + type;
        RequestBody body = new FormBody.Builder().add("api_type", "json").add("uh", user.getModhash()).add("flair_type", type).build();

        //Run the post requests.
        return httpClient.post(ApiEndpointUtils.REDDIT_CURRENT_BASE_URL, body, String.format(ApiEndpointUtils.CLEAR_SUBREDDIT_FLAIR_TEMPLATES, subreddit), user.getCookie());
    }

    /**
     * This deletes the given flair template in the given subreddit
     * <br>
     * Private due to deprecation. The method should not be used.<br><br>
     * <p/>
     * 'https://www.reddit.com/dev/api#POST_api_deleteflairtemplate'
     * <p/>
     * <code>
     * <table>
     * <tr>
     * <td>api_type</td>
     * <td>the string 'json'</td>
     * </tr>
     * <tr>
     * <td>flair_template_id</td>
     * <td></td>
     * </tr>
     * <tr>
     * <td>uh / X-Modhash header</td>
     * <td>a modhash</td>
     * </tr>
     * </table>
     *
     * @param flairTemplateID The flair template ID.
     * @param subreddit       The subreddit to delete the flair on.
     * @return Response The response of the request
     * @deprecated Currently not working - do not use.
     */
    @Deprecated
    private Response deleteFlairTemplate(String flairTemplateID, String subreddit) {
        //Format the required parameters
        //String params = ""
        //        + "api_type=json"
        //        + "&uh=" + user.getModhash()
        //        + "&flair_template_id=" + flairTemplateID;
        RequestBody body = new FormBody.Builder().add("api_type", "json").add("uh", user.getModhash()).add("flair_template_id", flairTemplateID).build();

        //Run the post requests.
        return httpClient.post(ApiEndpointUtils.REDDIT_CURRENT_BASE_URL, body, String.format(ApiEndpointUtils.DELETE_SUBREDDIT_FLAIR_TEMPLATE, subreddit), user.getCookie());
    }

    /**
     * This will add the flair to the given user or link in the given subreddit.<br><br>
     * <p/>
     * 'https://www.reddit.com/dev/api#POST_api_flair'
     * <p/>
     * <table>
     * <tr>
     * <td>api_type</td>
     * <td>the string 'json'</td>
     * </tr>
     * <tr>
     * <td>css_class</td>
     * <td>a valid subreddit image name</td>
     * </tr>
     * <tr>
     * <td>link</td>
     * <td>a full name of a link</td>
     * </tr>
     * <tr>
     * <td>name</td>
     * <td>a user by name</td>
     * </tr>
     * <tr>
     * <td>text</td>
     * <td>a string no longer than 64 characters</td>
     * </tr>
     * <tr>
     * <td>uh / X-Modhash header</td>
     * <td>a modhash</td>
     * </tr>
     * </table>
     *
     * @param cssClass  The CSS class to use for the flair. If set to null it will not be included.
     * @param link      The link to add the flair to - Cannot be combined with name (one must be null).
     * @param name      The users username to add the flair to - Cannot be combined with link (one must be null).
     * @param text      The text for the flair
     * @param subreddit The subreddit to set the flair on.
     * @return Response The response of the request
     */
    public Response flair(String cssClass, String link, String name, String text, String subreddit) {
        if (link != null && name != null) {
            System.err.println("You cannot flair both a link and user at the same time.");
            Response response = new Response() {//This is the best way I thought to do this. Not sure if it is -Vitineth
                @Override
                public int getStatusCode() {
                    return 400;
                }

                @Override
                public Object getResponseObject() {
                    return null;
                }

                @Override
                public String getResponseText() {
                    return "Bad request, you cannot flair both a link and user at the same time. (Generated by FlairActions.flair(String, String, String, String, String);)";
                }
            };
            return response;
        }
        if (text.length() > 64) {
            System.err.println("The given flair is too long (" + text.length() + "/64) Flair has been cut to " + text.substring(0, 64));
            text = text.substring(0, 64);
        }

        //String params = ""
        //        + "api_type=json"
        //        + "&uh=" + user.getModhash()
        //        + (cssClass != null ? "&css_class=" + cssClass : "")
        //        + (link != null ? "&link=" + link : "")
        //        + (name != null ? "&name=" + name : "")
        //        + "&text=" + text;
        FormBody.Builder builder = new FormBody.Builder().add("api_type", "json").add("uh", user.getModhash()).add("text", text);
        if(cssClass!=null) builder.add("css_class", cssClass);
        if(link!=null) builder.add("link", link);
        if(name!=null) builder.add("name", name);
        RequestBody body = builder.build();

        return httpClient.post(ApiEndpointUtils.REDDIT_CURRENT_BASE_URL, body, String.format(ApiEndpointUtils.FLAIR, subreddit), user.getCookie());
    }

    /**
     * This will set the configuration for the subreddits flair rules.<br><br>
     * <p/>
     * 'https://www.reddit.com/dev/api#POST_api_flairconfig'
     * <p/>
     * <table>
     * <tr>
     * <td>api_type</td>
     * <td>the string 'json'</td>
     * </tr>
     * <tr>
     * <td>flair_enabled</td>
     * <td>boolean value</td>
     * </tr>
     * <tr>
     * <td>flair_position</td>
     * <td>one of (left, right)</td>
     * </tr>
     * <tr>
     * <td>flair_self_assign_enabled</td>
     * <td>boolean value</td>
     * </tr>
     * <tr>
     * <td>link_flair_position</td>
     * <td>one of (`,left,right`)</td>
     * </tr>
     * <tr>
     * <td>linkFlairSelfAssignEnabled</td>
     * <td>boolean value</td>
     * </tr>
     * <tr>
     * <td>uh / X-Modhash header</td>
     * <td>a modhash</td>
     * </tr>
     * </table>
     *
     * @param flairEnabled               If user flairs are enabled on the subreddit
     * @param flairPosition              The position user flairs are on ('left' or 'right')
     * @param flairSelfAssignEnabled     If users can set their own flairs.
     * @param linkFlairPosition          If link flairs are enabled on the subreddit
     * @param linkFlairSelfAssignEnabled If users can set link flairs on their own posts.
     * @param subreddit                  The subreddit to set the flair configs on.
     * @return Response The response of the request
     */
    public Response flairConfig(boolean flairEnabled, final String flairPosition, boolean flairSelfAssignEnabled, final String linkFlairPosition, boolean linkFlairSelfAssignEnabled, String subreddit) {
        if ((!flairPosition.equalsIgnoreCase("left") && !flairPosition.equalsIgnoreCase("right")) || (!linkFlairPosition.equalsIgnoreCase("left") && !linkFlairPosition.equalsIgnoreCase("right"))) {
            System.err.println("flairPosition (" + flairPosition + ") and linkFlairPosition (" + linkFlairPosition + ") must be equal to either 'left' or 'right'");
            Response response = new Response() {//This is the best way I thought to do this. Not sure if it is -Vitineth
                @Override
                public int getStatusCode() {
                    return 400;
                }

                @Override
                public Object getResponseObject() {
                    return null;
                }

                @Override
                public String getResponseText() {
                    return "Bad request, flairPosition (" + flairPosition + ") and linkFlairPosition (" + linkFlairPosition + ") must be equal to either 'left' or 'right'. (Generated by FlairActions.flairConfig(boolean, String, boolean, String, boolean, String))";
                }
            };
            return response;
        }
        //String params = ""
        //        + "api_type=json"
        //        + "&uh=" + user.getModhash()
        //        + "&flair_enabled=" + flairEnabled
        //        + "&flair_position=" + flairPosition
        //        + "&flair_self_assign_enabled=" + flairSelfAssignEnabled
        //        + "&link_flair_position=" + linkFlairPosition
        //        + "&link_flair_self_assign_enabled=" + linkFlairSelfAssignEnabled;
        RequestBody body = new FormBody.Builder().add("api_type", "json").add("uh", user.getModhash()).add("flair_enabled", String.valueOf(flairEnabled)).add("flair_position", flairPosition)
                .add("flair_self_assign_enabled", String.valueOf(flairSelfAssignEnabled)).add("link_flair_position", linkFlairPosition)
                .add("link_flair_self_assign_enabled", String.valueOf(linkFlairSelfAssignEnabled)).build();

        return httpClient.post(ApiEndpointUtils.REDDIT_CURRENT_BASE_URL, body, String.format(ApiEndpointUtils.FLAIR_CONFIG, subreddit), user.getCookie());
    }

    /**
     * This method will list the flairs.
     * <br>
     * Private due to deprecation. The method should not be used.
     * <br><br>
     * <p/>
     * 'https://www.reddit.com/dev/api#GET_api_flairlist'
     * <p/>
     * <table>
     * <tr>
     * <td>after</td>
     * <td>fullname of a thing</td>
     * </tr>
     * <tr>
     * <td>before</td>
     * <td>fullname of a thing</td>
     * </tr>
     * <tr>
     * <td>count</td>
     * <td>a positive integer (default: 0)</td>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>the maximum number of items desired (default: 25, maximum: 1000)</td>
     * </tr>
     * <tr>
     * <td>name</td>
     * <td>a user by name</td>
     * </tr>
     * <tr>
     * <td>show</td>
     * <td>(optional) the string all</td>
     * </tr>
     * </table>
     *
     * @param after     Flairs after this id
     * @param before    But before this id
     * @param count     A positive integer
     * @param limit     The maximum number of items desired
     * @param username  A users name (Lists the available flairs for the user)
     * @param show      Unknown
     * @param subreddit The subreddit to get the flairs on.
     * @return Response The response of the request
     * @deprecated Currently not working - do not use.
     */
    @Deprecated
    private Response flairList(String after, String before, int count, int limit, String username, boolean show, String subreddit) {
        if (count < 0) {
            System.err.println("The count cannot be less than 0.");
            Response response = new Response() {//This is the best way I thought to do this. Not sure if it is -Vitineth
                @Override
                public int getStatusCode() {
                    return 400;
                }

                @Override
                public Object getResponseObject() {
                    return null;
                }

                @Override
                public String getResponseText() {
                    return "Bad request, the count cannot be less than 0. (Generated by FlairActions.flairList(String, String, int, int, String, boolean, String);)";
                }
            };
            return response;
        }
        if (limit < 0) {
            System.err.println("The limit cannot be less than 0.");
            Response response = new Response() {//This is the best way I thought to do this. Not sure if it is -Vitineth
                @Override
                public int getStatusCode() {
                    return 400;
                }

                @Override
                public Object getResponseObject() {
                    return null;
                }

                @Override
                public String getResponseText() {
                    return "Bad request, the limit cannot be less than 0. (Generated by FlairActions.flairList(String, String, int, int, String, boolean, String);)";
                }
            };
            return response;
        }
        String params = ""
                + (after != null ? "after=" + after : "")
                + (before != null ? "&before=" + before : "")
                + "&count=" + count
                + "&limit=" + limit
                + (username != null ? "&name=" + username : "");
        if (show) params = params + "&show=all";

        return httpClient.get(ApiEndpointUtils.REDDIT_CURRENT_BASE_URL, String.format(ApiEndpointUtils.FLAIR_LIST, subreddit) + "?" + params, user.getCookie());
    }

    /**
     * Returns possible flairs for the user
     * <br>
     * Private due to deprecation. The method should not be used.
     * <br><br>
     * <p/>
     * 'https://www.reddit.com/dev/api#POST_api_flairselector'
     * <p/>
     * <table>
     * <tr>
     * <td>api_type</td>
     * <td>the string 'json'</td>
     * </tr>
     * <tr>
     * <td>link</td>
     * <td>a fullname of a link</td>
     * </tr>
     * <tr>
     * <td>name</td>
     * <td>a user by name</td>
     * </tr>
     * <tr>
     * <td>uh / X-Modhash header</td>
     * <td>a modhash</td>
     * </tr>
     * </table>
     *
     * @param username  The username of the user whose account you want to get flair optionsfrom.
     * @param link      If used gives link flair options - Cannot be used with username (one must be null)
     * @param subreddit The subreddit to get the flairs on.
     * @return Response The response of the request
     * @deprecated Currently not working - do not use.
     */
    @Deprecated
    private Response flairSelector(String username, String link, String subreddit) {
        if (username != null && link != null) {
            System.err.println("You cannot specify a link and a username at the same time.");
            Response response = new Response() {//This is the best way I thought to do this. Not sure if it is -Vitineth
                @Override
                public int getStatusCode() {
                    return 400;
                }

                @Override
                public Object getResponseObject() {
                    return null;
                }

                @Override
                public String getResponseText() {
                    return "Bad request, you cannot specify a link and a username at the same time. (Generated by FlairActions.flairSelector(String, String, String);)";
                }
            };
            return response;
        }
        String params = ""
                + "api_type=json"
                + "&uh=" + user.getModhash()
                + (link != null ? "&link=" + link : "")
                + (username != null ? "&name=" + username : "");
        FormBody.Builder builder = new FormBody.Builder().add("api_type", "json").add("uh", user.getModhash());
        if(link!=null) builder.add("link", link);
        if(username!=null) builder.add("name", username);
        RequestBody body = builder.build();

        return httpClient.post(ApiEndpointUtils.REDDIT_CURRENT_BASE_URL, body, String.format(ApiEndpointUtils.FLAIR_SELECTOR, subreddit), user.getCookie());
    }

    /**
     * This will add the flair template to the given subreddit.<br><br>
     * <p/>
     * 'https://www.reddit.com/dev/api#POST_api_flairtemplate'
     * <p/>
     * <table>
     * <tr>
     * <td>api_type</td>
     * <td>the string 'json'</td>
     * </tr>
     * <tr>
     * <td>css_class</td>
     * <td>a valid subreddit image name</td>
     * </tr>
     * <p/>
     * <tr>
     * <td>flair_template_id</td>
     * <td></td>
     * </tr>
     * <tr>
     * <td>flair_type</td>
     * <td>one of (USER_FLAIR, LINK_FLAIR)</td>
     * </tr>
     * <tr>
     * <td>text</td>
     * <td>a string no longer than 64 characters</td>
     * </tr>
     * <tr>
     * <td>text_editable</td>
     * <td>boolean value</td>
     * </tr>
     * <p/>
     * <tr>
     * <td>uh / X-Modhash header</td>
     * <td>a modhash</td>
     * </tr>
     * </table>
     *
     * @param cssClass        The The CSS class to use for the flair. If set to null it will not be included.
     * @param flairTemplateID The flair template ID.
     * @param flairType       The flair type (either USER_FLAIR or LINK_FLAIR)
     * @param text            The text for the flair
     * @param textEditable    If the text should be editable
     * @param subreddit       The subreddit to set the flair on.
     * @return Response The response of the request
     */
    public Response flairTemplate(String cssClass, String flairTemplateID, String flairType, String text, boolean textEditable, String subreddit) {
        if (!flairType.equalsIgnoreCase("USER_FLAIR") && !flairType.equalsIgnoreCase("LINK_FLAIR")) {
            System.err.println("Type must be either USER_FLAIR or LINK_FLAIR.");
            Response response = new Response() {//This is the best way I thought to do this. Not sure if it is -Vitineth
                @Override
                public int getStatusCode() {
                    return 400;
                }

                @Override
                public Object getResponseObject() {
                    return null;
                }

                @Override
                public String getResponseText() {
                    return "Bad request, type must be either USER_FLAIR or LINK_FLAIR. (Generated by FlairActions.flairTemplate(String, String, String, String, boolean, String);)";
                }
            };
            return response;
        }
        if (text.length() > 64) {
            System.err.println("The given flair is too long (" + text.length() + "/64) Flair has been cut to " + text.substring(0, 64));
            text = text.substring(0, 64);
        }

        String params = ""
                + "api_type=json"
                + "&uh=" + user.getModhash()
                + (cssClass != null ? "&css_class=" + cssClass : "")
                + "&flair_template_id=" + flairTemplateID
                + "&flair_type=" + flairType
                + "&text=" + text
                + "&text_editable=" + textEditable;

        return httpClient.post(ApiEndpointUtils.REDDIT_CURRENT_BASE_URL, null, String.format(ApiEndpointUtils.FLAIR_TEMPLATE, subreddit), user.getCookie());
    }

    /**
     * This will select the flair for the given user.
     * The method is currently unusable as it requires a Flair Template ID which is obtained using the flairlist API; however
     * at the current time, that method does not work. Because of this I do not have access to a flair template id to test with.<br><br>
     * <p/>
     * 'https://www.reddit.com/dev/api#POST_api_selectflair'
     * <p/>
     * <table>
     * <tr>
     * <td>api_type</td>
     * <td>the string 'json'</td>
     * </tr>
     * <tr>
     * <td>flair_template_id</td>
     * <td></td>
     * </tr>
     * <tr>
     * <td>link</td>
     * <td>a fullname of a linke</td>
     * </tr>
     * <tr>
     * <td>username</td>
     * <td>a user by name</td>
     * </tr>
     * <tr>
     * <td>text</td>
     * <td>a string no longer than 64 characters</td>
     * </tr>
     * <tr>
     * <td>uh / X-Modhash header</td>
     * <td>a modhash</td>
     * </tr>
     * </table>
     *
     * @param flairTemplateID The flair template ID.
     * @param link            The link to add the flair to - Cannot be combined with name (one must be null).
     * @param username        The username to add the flair to - Cannot be combined with link (one must be null).
     * @param text            The text for the flair
     * @param subreddit       The subreddit to set the flair on.
     * @return Response The response of the request
     */
    public Response selectFlair(String flairTemplateID, String link, String username, String text, String subreddit) {
        if (username != null && link != null) {
            System.err.println("You cannot specify a link and a username at the same time.");
            return null;
        }
        if (text.length() > 64) {
            System.err.println("The given flair is too long (" + text.length() + "/64) Flair has been cut to " + text.substring(0, 64));
            text = text.substring(0, 64);
        }

        String params = ""
                + "api_type=json"
                + "&uh=" + user.getModhash()
                + "&flair_template_id=" + flairTemplateID
                + "&link=" + link
                + "&name=" + username
                + "&text=" + text;

        return httpClient.post(ApiEndpointUtils.REDDIT_CURRENT_BASE_URL, null, String.format(ApiEndpointUtils.SELECT_FLAIR, subreddit), user.getCookie());
    }

    /**
     * This will set whether flairs are enabled on the given subreddit.
     * <br><br>
     * <p/>
     * 'https://www.reddit.com/dev/api#POST_api_setflairenabled'
     * <p/>
     * <table>
     * <tr>
     * <td>api_type</td>
     * <td>the string 'json'</td>
     * </tr>
     * <tr>
     * <td>flair_enabled</td>
     * <td>boolean value</td>
     * </tr>
     * <tr>
     * <td>uh / X-Modhash header</td>
     * <td>a modhash</td>
     * </tr>
     * </table>
     *
     * @param flairEnabled If flairs are enabled on the subreddit
     * @param subreddit    The subreddit to set the flair config on.
     * @return Response The response of the request
     */
    public Response setFlairEnabled(boolean flairEnabled, String subreddit) {
        String params = ""
                + "api_type=json"
                + "&uh=" + user.getModhash()
                + "&flair_enabled=" + flairEnabled;

        return httpClient.post(ApiEndpointUtils.REDDIT_CURRENT_BASE_URL, null, String.format(ApiEndpointUtils.FLAIR_ENABLED, subreddit), user.getCookie());
    }

}
